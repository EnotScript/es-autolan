package com.autolan.enotscript;

import net.minecraft.client.Minecraft;
import net.minecraft.client.server.IntegratedServer;
import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.Component;
import net.minecraft.network.protocol.game.ClientboundInitializeBorderPacket;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.border.WorldBorder;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.lang.reflect.Field;

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LAN-—Å–µ—Ä–≤–µ—Ä–æ–º:
 * - –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ LAN
 * - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤
 * - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MOTD
 * - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
 */
public class LanServerManager {
    private static final Logger LOGGER = LogManager.getLogger("AutoLan");

    /**
     * –ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –º–∏—Ä –≤ LAN —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
     */
    public static void openToLan(IntegratedServer server) {
        if (!AutoLan.CONFIG.enabled.get()) return;

        boolean success = server.publishServer(
                AutoLan.CONFIG.gameType.get(),
                AutoLan.CONFIG.allowCheats.get(),
                AutoLan.CONFIG.port.get()
        );

        if (!success) {
            LOGGER.error("‚ùå Failed to publish server to LAN");
            return;
        }

        int port = server.getPort();
        setMaxPlayers(server, AutoLan.CONFIG.maxPlayers.get());
        updateServerMOTD(server);
        syncMaxPlayers(server);

        LOGGER.info("‚úÖ Server published on port {}", port);

        var player = Minecraft.getInstance().player;
        if (player != null) {
            player.displayClientMessage(
                    Component.translatable("autolan.lan.started")
                            .withStyle(ChatFormatting.GRAY)
                            .append(Component.literal(String.valueOf(port)).withStyle(ChatFormatting.AQUA))
                            .append(Component.literal(", "))
                            .append(Component.translatable("autolan.lan.maxplayers")
                                    .withStyle(ChatFormatting.GRAY)
                                    .append(Component.literal(String.valueOf(AutoLan.CONFIG.maxPlayers.get())).withStyle(ChatFormatting.AQUA))
                            ),
                    false
            );
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é.
     */
    public static void setMaxPlayers(IntegratedServer server, int newMax) {
        try {
            Object playerList = server.getPlayerList();
            Class<?> superClass = playerList.getClass().getSuperclass();

            for (Field field : superClass.getDeclaredFields()) {
                field.setAccessible(true);
                if (field.getType() == int.class) {
                    int value = field.getInt(playerList);
                    if (value == 8 || value == AutoLan.CONFIG.maxPlayers.get()) {
                        field.setInt(playerList, newMax);
                        LOGGER.info("‚úÖ Max players set to {} via field '{}'", newMax, field.getName());
                        return;
                    }
                }
            }

            LOGGER.warn("‚ö†Ô∏è Could not find maxPlayers field in PlayerList superclass");
        } catch (Exception e) {
            LOGGER.error("‚ùå Failed to set maxPlayers: {}", e.getMessage());
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –ø–∞–∫–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –º–∏—Ä–∞.
     */
    public static void syncMaxPlayers(IntegratedServer server) {
        try {
            WorldBorder border = server.overworld().getWorldBorder();
            ClientboundInitializeBorderPacket packet = new ClientboundInitializeBorderPacket(border);

            for (ServerPlayer player : server.getPlayerList().getPlayers()) {
                player.connection.send(packet);
            }

            LOGGER.debug("üîÑ Synced maxPlayers to all clients");
        } catch (Exception e) {
            LOGGER.error("‚ùå Failed to sync maxPlayers: {}", e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç MOTD –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–∏—Ä–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é.
     */
    public static void updateServerMOTD(IntegratedServer server) {
        try {
            String newMotd = AutoLan.CONFIG.motd.get();
            Class<?> current = server.getClass();

            while (current != null) {
                for (Field field : current.getDeclaredFields()) {
                    field.setAccessible(true);
                    if (field.getType() == String.class) {
                        String value = (String) field.get(server);
                        if (value != null && !value.isEmpty()) {
                            field.set(server, newMotd);
                            LOGGER.info("‚úÖ MOTD updated to '{}' via field '{}'", newMotd, field.getName());
                            return;
                        }
                    }
                }
                current = current.getSuperclass();
            }

            LOGGER.warn("‚ö†Ô∏è MOTD field not found in class hierarchy");
        } catch (Exception e) {
            LOGGER.error("‚ùå Failed to update MOTD: {}", e.getMessage());
        }
    }
}
